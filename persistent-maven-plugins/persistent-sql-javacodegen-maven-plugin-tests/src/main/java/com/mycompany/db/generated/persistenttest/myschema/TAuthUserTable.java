package com.mycompany.db.generated.persistenttest.myschema;

import java.lang.Override;
import com.persistentbit.sql.dsl.generic.inserts.Insert;
import com.persistentbit.sql.dsl.generic.inserts.InsertResult;
import com.persistentbit.sql.dsl.generic.expressions.DExprTable;
import com.persistentbit.sql.dsl.generic.query.Query;
import com.mycompany.db.generated.persistenttest.myschema.AuthUser;
import java.time.LocalDateTime;
import com.persistentbit.collections.PList;
import com.persistentbit.result.Result;
import com.persistentbit.sql.dsl.exprcontext.DbTableContext;
import com.persistentbit.code.annotations.Nullable;
import com.persistentbit.sql.work.DbWork;
import com.persistentbit.sql.dsl.exprcontext.DbContext;
import java.lang.String;

public class TAuthUserTable extends TAuthUser implements DExprTable<AuthUser> {
	
	
	public TAuthUserTable(DbTableContext tableContext){
		super(tableContext.createExprLong("id"),tableContext.createExprLong("auth_app_id"),tableContext.createExprString("user_name"),tableContext.createExprString("password"),tableContext.createExprInt( "wrong_password_count"),tableContext.createExprDateTime("created"),tableContext.createExprDateTime("last_login"),tableContext.createExprDateTime("verified"),tableContext.createExprString("reset_password_code"),tableContext.createExprDateTime("reset_password_valid_until"),tableContext.createExprString("verify_code"),tableContext.createExprDateTime("verify_code_valid_until"));
		this._tableContext = tableContext;
		this._insertFieldNames = PList.val("id", "auth_app_id", "user_name", "password", "wrong_password_count", "created", "last_login", "verified", "reset_password_code", "reset_password_valid_until", "verify_code", "verify_code_valid_until");
		this._autoGenKeyFieldNames = PList.val("id");
	}
	public  TAuthUserTable	alias(String tableAlias){
		return new TAuthUserTable(_tableContext.withTableAlias(tableAlias));
	}
	@Override
	public  Query	query(){
		return _tableContext.createQuery(this);
	}
	@Override
	public  TAuthUser	all(){
		return this;
	}
	public  TAuthUser	val(AuthUser v){
		DbContext db = _tableContext.getDbContext();
		return new TAuthUser(
			db.val(v.getId()), db.val(v.getAuthAppId()), db.val(v.getUserName()), db.val(v.getPassword()), db.val(v.getWrongPasswordCount()), db.val(v.getCreated().orElse(null)), db.val(v.getLastLogin().orElse(null)), db.val(v.getVerified().orElse(null)), db.val(v.getResetPasswordCode().orElse(null)), db.val(v.getResetPasswordValidUntil().orElse(null)), db.val(v.getVerifyCode().orElse(null)), db.val(v.getVerifyCodeValidUntil().orElse(null))
		);
	}
	public  DbWork<AuthUser>	insert(AuthUser record){
		return new Insert(_tableContext.getDbContext(),this)
			.row(val(record))
			.withAutoGenerated(id)
			.map(insertResult -> {
				PList keys = insertResult.getAutoGenKeys().head();
				return record
					.withId((long)keys.get(0))
				;
			});
	}
}
