package com.mycompany.db.generated.persistenttest.myschema;

import java.lang.Override;
import com.persistentbit.sql.dsl.generic.inserts.Insert;
import com.persistentbit.sql.dsl.generic.inserts.InsertResult;
import com.persistentbit.sql.dsl.generic.expressions.DExprTable;
import com.persistentbit.sql.dsl.generic.query.Query;
import com.mycompany.db.generated.persistenttest.myschema.APerson;
import com.persistentbit.collections.PList;
import com.persistentbit.result.Result;
import com.persistentbit.sql.dsl.exprcontext.DbTableContext;
import com.persistentbit.code.annotations.Nullable;
import com.persistentbit.sql.work.DbWork;
import com.persistentbit.sql.dsl.exprcontext.DbContext;
import java.lang.String;

public class TAPersonTable extends TAPerson implements DExprTable<APerson> {
	
	
	public TAPersonTable(DbTableContext tableContext){
		super(tableContext.createExprLong("id"),tableContext.createExprString("user_name"),tableContext.createExprString("password"),tableContext.createExprString("street"),tableContext.createExprInt( "house_number"),tableContext.createExprString("bus_number"),tableContext.createExprString("postalcode"),tableContext.createExprString("city"),tableContext.createExprString("country"));
		this._tableContext = tableContext;
		this._insertFieldNames = PList.val("id", "user_name", "password", "street", "house_number", "bus_number", "postalcode", "city", "country");
		this._autoGenKeyFieldNames = PList.val("id");
	}
	public  TAPersonTable	alias(String tableAlias){
		return new TAPersonTable(_tableContext.withTableAlias(tableAlias));
	}
	@Override
	public  Query	query(){
		return _tableContext.createQuery(this);
	}
	@Override
	public  TAPerson	all(){
		return this;
	}
	public  TAPerson	val(APerson v){
		DbContext db = _tableContext.getDbContext();
		return new TAPerson(
			db.val(v.getId()), db.val(v.getUserName()), db.val(v.getPassword()), db.val(v.getStreet()), db.val(v.getHouseNumber()), db.val(v.getBusNumber().orElse(null)), db.val(v.getPostalcode()), db.val(v.getCity()), db.val(v.getCountry())
		);
	}
	public  DbWork<APerson>	insert(APerson record){
		return new Insert(_tableContext.getDbContext(),this)
			.row(val(record))
			.withAutoGenerated(id)
			.map(insertResult -> {
				PList keys = insertResult.getAutoGenKeys().head();
				return record
					.withId((long)keys.get(0))
				;
			});
	}
}
